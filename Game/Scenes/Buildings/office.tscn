[gd_scene load_steps=15 format=3 uid="uid://dcokbgu1lddke"]

[ext_resource type="Texture2D" uid="uid://fccm6rkj8qci" path="res://Art/Buildings/alt officebubble.png" id="3_vudgl"]
[ext_resource type="Texture2D" uid="uid://bi48mgib2pdt5" path="res://Art/Buildings/alt office-export-darker.png" id="4_y13vq"]
[ext_resource type="Texture2D" uid="uid://bgbdpnmhr0nvt" path="res://Art/Buildings/rubble4.png" id="5_txd6k"]
[ext_resource type="Texture2D" uid="uid://cwwrp76ptm2gj" path="res://Art/Buildings/string.png" id="6_h58g1"]
[ext_resource type="Script" uid="uid://dek45tkka5yfk" path="res://Scenes/testrotate.gd" id="7_lax2a"]

[sub_resource type="GDScript" id="GDScript_slacx"]
script/source = "extends RigidBody2D
@export var size : int = 2
@export var crumbleSpeed : float = 0.5
@export var height : float
@export var width : float
@export var rubblePos : Vector2
@export var bubbleSpeed : float = 1
@export var shader : ShaderMaterial
var crumbleProgress : float = 0
var crumbling : bool = false
var bubbled : bool = false
var disappeared : bool = false
var startpos : Vector2
@export var injectPoint : Node2D
var bubbleProgress : float = 0

var BalloonForBalloonGod : CPUParticles2D
var BalloonGod : Sprite2D
var Camera : Camera2D
var rubbleSFX : AudioStreamPlayer2D

func _ready():
	$AnimatedSprite2D.play(\"default\")
	$Effects.hide()
	show()
	shader.set_shader_parameter(\"progress\", 0)
	$Effects.position = Vector2(0,0)
	startpos = position
	print(startpos)
	z_index = -1
	BalloonForBalloonGod = $\"../../Background/BalloonGod/Balloon4BalloonGod\"
	BalloonGod = $\"../../Background/BalloonGod\"
	Camera =  $\"../../Balloon/Node/Camera2D\"
	rubbleSFX = $\"../../Collapse sound\"
	

func bubble():
	if not bubbled:
		bubbled = true
		#$AnimatedSprite2D.play(\"balloon\")
		$Effects.play(\"balloon\")
		$Effects.show()
		print(\"ballloooon\")
		#print($AnimatedSprite2D.g)
		#$AnimatedSprite2D.set_instance_shader_parameter(\"enabled\",true)
		
		var adjustedInjectPoint = injectPoint.global_position - position + Vector2(width,height)/2
		shader.set_shader_parameter(\"injectPoint\", adjustedInjectPoint)
		shader.set_shader_parameter(\"sizeX\",width)
		shader.set_shader_parameter(\"sizeY\",height)
		#$AnimatedSprite2D.set_instance_shader_parameter(\"injectPoint\", adjustedInjectPoint)
		print(adjustedInjectPoint)
		#$AnimatedSprite2D.set_instance_shader_parameter(\"sizeX\",width)
		#$AnimatedSprite2D.set_instance_shader_parameter(\"sizeY\",height)
		mass = 4
		gravity_scale = -0.25
		
	
func floatAway():
	BalloonForBalloonGod.emitting = true
	hide()
	disappeared = true
	collision_mask = 0
	collision_layer = 0
	await BalloonForBalloonGod.finished
	BalloonGod.basePos -= Vector2(0,1)

	
	
	
func _process(delta):
	if(disappeared):
		return
	if(disappeared):
		print(\"wtf\")
	BalloonForBalloonGod.emitting = false
	if(Input.is_action_just_pressed(\"debug\") and visible):
		bubble()
	
	if(bubbled and bubbleProgress < 1):
		bubbleProgress += delta * bubbleSpeed
		#$AnimatedSprite2D.set_instance_shader_parameter(\"progress\",bubbleProgress)
		shader.set_shader_parameter(\"progress\", bubbleProgress)
	
	if(bubbled and global_position.y < -240):
		collision_mask = 0
		collision_layer = 0
	
	if(bubbled and global_position.y < Camera.global_position.y - 150):
		floatAway()
	
	if(crumbling):
		position = startpos + Vector2(0,round(crumbleProgress * height * 1.1))
		$AnimatedSprite2D.position.x = round(randf_range(-2,2))
		$Effects.position = rubblePos -Vector2(0,round(crumbleProgress * height * 1.1))
		crumbleProgress += delta * crumbleSpeed
		if(crumbleProgress >= 1):
			rubbleSFX.stop()
			crumbling = false
			$AnimatedSprite2D.hide()
	
	
func rubble():
	if(not crumbling):
		crumbling = true
		rubbleSFX.play()
		$Effects.play(\"Rubble\")
		$Effects.position = rubblePos
		$Effects.show()
		freeze = true
		collision_layer = round(pow(2,10))
"

[sub_resource type="Shader" id="Shader_kpluv"]
code = "shader_type canvas_item;
uniform vec2 injectPoint;
uniform bool enabled;
uniform float progress;
uniform float sizeX;
uniform float sizeY;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	float radius = pow(progress,2)*2.2;
	// COLOR.b = 100.0;
	COLOR.a = (sign(pow( (UV.x * sizeX - injectPoint.x)/sizeX ,2.0) + pow((UV.y * sizeY - injectPoint.y)/sizeY ,2.0) -  radius) + 1.0)*50.0 * COLOR.a;
	// Called for every pixel the material is visible on.
}

//void light() {
//	// Called for every pixel for every light affecting the CanvasItem.
//	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_slacx"]
shader = SubResource("Shader_kpluv")
shader_parameter/injectPoint = Vector2(67, 5)
shader_parameter/enabled = false
shader_parameter/progress = 0.0
shader_parameter/sizeX = 60.0
shader_parameter/sizeY = 80.0

[sub_resource type="Shader" id="Shader_frqc6"]
code = "shader_type canvas_item;
uniform vec2 injectPoint;
uniform bool enabled;
uniform float progress;
uniform float sizeX;
uniform float sizeY;

void vertex() {
	// Called for every vertex the material is visible on.
}

void fragment() {
	float radius = pow(progress,2)*2.2;
	// COLOR.b = 100.0;
	COLOR.a = (sign(pow( (UV.x * sizeX - injectPoint.x)/sizeX ,2.0) + pow((UV.y * sizeY - injectPoint.y)/sizeY ,2.0) -  radius) + 1.0)*50.0 * COLOR.a;
	// Called for every pixel the material is visible on.
}

//void light() {
//	// Called for every pixel for every light affecting the CanvasItem.
//	// Uncomment to replace the default light processing function with this one.
//}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_7stke"]
shader = SubResource("Shader_frqc6")
shader_parameter/injectPoint = Vector2(67, 5)
shader_parameter/enabled = false
shader_parameter/progress = 0.0
shader_parameter/sizeX = 60.0
shader_parameter/sizeY = 80.0

[sub_resource type="SpriteFrames" id="SpriteFrames_vudgl"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_vudgl")
}],
"loop": true,
"name": &"balloon",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_y13vq")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_slacx"]
size = Vector2(64, 80)

[sub_resource type="SpriteFrames" id="SpriteFrames_frqc6"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("5_txd6k")
}],
"loop": true,
"name": &"Rubble",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("3_vudgl")
}],
"loop": true,
"name": &"balloon",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("4_y13vq")
}],
"loop": true,
"name": &"building",
"speed": 5.0
}]

[sub_resource type="SpriteFrames" id="SpriteFrames_7stke"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("6_h58g1")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}]

[node name="Office" type="RigidBody2D"]
collision_layer = 4
collision_mask = 295
mass = 1000.0
freeze_mode = 1
script = SubResource("GDScript_slacx")
shader = SubResource("ShaderMaterial_slacx")

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_7stke")
sprite_frames = SubResource("SpriteFrames_vudgl")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_slacx")

[node name="Effects" type="AnimatedSprite2D" parent="."]
z_index = -3
position = Vector2(0, 24)
sprite_frames = SubResource("SpriteFrames_frqc6")
animation = &"balloon"

[node name="AnimatedSprite2D2" type="AnimatedSprite2D" parent="."]
z_index = -4
position = Vector2(0, 39)
sprite_frames = SubResource("SpriteFrames_7stke")
offset = Vector2(0, 6)
script = ExtResource("7_lax2a")
